[build-system]
requires = ["setuptools>=65", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "data-centralization-platform"
version = "0.1.0"
description = "Transform scattered public APIs into unified, LLM-ready knowledge"
authors = [{name = "Your Name", email = "your.email@example.com"}]
readme = "README.md"
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Database :: Database Engines/Servers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
]
keywords = ["data-centralization", "api-integration", "llm", "correlation-analysis", "microservices"]
dependencies = [
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "sqlalchemy>=2.0.23",
    "alembic>=1.13.1",
    "psycopg2-binary>=2.9.9",
    "httpx>=0.25.2",
    "python-dotenv>=1.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "black>=23.11.0",
    "flake8>=6.1.0",
    "mypy>=1.7.1",
    "isort>=5.13.2",
]
viz = [
    "plotly>=5.17.0",
    "dash>=2.16.1",
    "seaborn>=0.13.0",
    "matplotlib>=3.8.2",
    "folium>=0.15.1",
]
ml = [
    "torch>=2.1.2",
    "transformers>=4.36.2",
    "sentence-transformers>=2.2.2",
    "scikit-learn>=1.3.2",
    "statsmodels>=0.14.1",
]
all = [
    "data-centralization-platform[dev,viz,ml]",
]

[project.scripts]
data-platform = "shared_core.cli:main"

[project.urls]
Homepage = "https://github.com/yourusername/data-centralization-platform"
Repository = "https://github.com/yourusername/data-centralization-platform"
Documentation = "https://github.com/yourusername/data-centralization-platform/docs"
"Bug Tracker" = "https://github.com/yourusername/data-centralization-platform/issues"

[tool.setuptools]
package-dir = {"" = "packages"}

[tool.setuptools.packages.find]
where = ["packages"]
include = ["shared_core*", "workflows*"]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
(
  /(
      \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
    | migrations
  )/
)
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["packages", "services", "flows"]
skip_gitignore = true

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "spotipy.*",
    "notion_client.*",
    "tmdbsimple.*",
    "pyowm.*",
    "prefect.*",
    "celery.*",
    "dramatiq.*",
    "plotly.*",
    "dash.*",
    "folium.*",
    "geopandas.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["development/testing"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
minversion = "7.4"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--tb=short",
    "--cov=packages/shared_core",
    "--cov=services",
    "--cov=flows",
    "--cov-report=html:development/testing/coverage_html",
    "--cov-report=term-missing",
    "--cov-fail-under=80",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "functional: Functional tests",
    "correlation: Correlation analysis tests",
    "llm: LLM integration tests",
    "api: API integration tests",
    "database: Database tests",
    "slow: Slow tests (may be skipped in CI)",
    "external: Tests that require external APIs",
    "gpu: Tests that require GPU",
    "docker: Tests that require Docker",
]

[tool.coverage.run]
source = ["packages/shared_core", "services", "flows"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/*_test.py",
    "*/migrations/*",
    "*/.venv/*",
    "setup.py",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "development/testing/coverage_html"

[tool.flake8]
max-line-length = 88
max-complexity = 10
ignore = ["E203", "E501", "W503"]
per-file-ignores = [
    "__init__.py:F401",
    "**/migrations/*.py:E501",
]
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "build",
    "dist",
    "*.egg-info",
    "migrations",
]

[tool.bandit]
exclude_dirs = ["development/testing", ".venv"]
skips = ["B101", "B601"]

[tool.ruff]
line-length = 88
target-version = "py311"
select = [
    "E",    # pycodestyle errors
    "F",    # pyflakes
    "W",    # pycodestyle warnings
    "C90",  # mccabe
    "I",    # isort
    "N",    # pep8-naming
    "UP",   # pyupgrade
    "ANN",  # flake8-annotations
    "S",    # bandit
    "BLE",  # flake8-blind-except
    "FBT",  # flake8-boolean-trap
    "B",    # flake8-bugbear
    "A",    # flake8-builtins
    "COM",  # flake8-commas
    "C4",   # flake8-comprehensions
    "DTZ",  # flake8-datetimez
    "EM",   # flake8-errmsg
    "EXE",  # flake8-executable
    "ISC",  # flake8-implicit-str-concat
    "ICN",  # flake8-import-conventions
    "G",    # flake8-logging-format
    "INP",  # flake8-no-pep420
    "PIE",  # flake8-pie
    "PT",   # flake8-pytest-style
    "Q",    # flake8-quotes
    "RSE",  # flake8-raise
    "RET",  # flake8-return
    "SLF",  # flake8-self
    "SIM",  # flake8-simplify
    "TID",  # flake8-tidy-imports
    "ARG",  # flake8-unused-arguments
    "PTH",  # flake8-use-pathlib
    "ERA",  # eradicate
    "PD",   # pandas-vet
    "PGH",  # pygrep-hooks
    "PL",   # pylint
    "TRY",  # tryceratops
    "NPY",  # numpy
    "RUF",  # ruff-specific
]
ignore = [  # missing-type-cls
    "D",       # pydocstyle (disabled for now)
]
fixable = ["I"]
unfixable = []

[tool.ruff.per-file-ignores]
"migrations/*.py" = ["E501"]
"development/testing/*.py" = ["S101", "ANN", "PLR2004"]

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.isort]
known-first-party = ["shared_core", "workflows"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.flake8-type-checking]
strict = true
